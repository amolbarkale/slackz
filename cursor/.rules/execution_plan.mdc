---
description: 
globs: 
alwaysApply: true
---
# Execution Plan: Building V1 Slack-Clone (MoSCoW + Phased)

Below is a phased, atomic-task breakdown using the MoSCoW prioritization framework (Must-have, Should-have, Could-have, Won't-have). Each phase contains the smallest actionable tasks. If the coding agent completes through the final phase, end-to-end V1 of the application will be functioning.

---

## MoSCoW Legend

- **MUST**: Essential for V1; without these, the app cannot function.  
- **SHOULD**: Important, but can be deferred if timeline demands.  
- **COULD**: Nice to have; enhances usability but not critical.  
- **WON'T**: Out of scope for V1.

---

# Phase 1: Backend Foundation

> **Goal**: Stand up a Convex backend with schema, auth, and basic connectivity.

### 1.1. Initialize Convex Project
- **MUST**  
  1. Create new Convex project and configure.  
  2. Record `CONVEX_DEPLOYMENT_URL` and `NEXT_PUBLIC_CONVEX_URL`.  
  3. Configure authentication providers (GitHub, Google, Password).  
  4. Set up Convex client in Next.js application.

### 1.2. Define Database Schema & Collections
- **MUST**  
  1. In `convex/schema.ts`, create `workspaces` collection (id, name, userId, joinCode).  
  2. Create `members` collection (userId, workspaceId, role) with indexes.  
  3. Create `channels` collection (name, workspaceId) with indexes.  
  4. Create `conversations` collection (workspaceId, memberOneId, memberTwoId).  
  5. Create `messages` collection with comprehensive indexes.  
  6. Create `reactions` collection (workspaceId, messageId, memberId, value).  
  7. Configure all necessary indexes for optimal query performance.

### 1.3. Implement Core Convex Functions
- **MUST**  
  1. Create workspace CRUD operations (create, get, update, remove, join).  
  2. Create channel operations with proper authorization.  
  3. Create message operations (create, get, update, remove) with pagination.  
  4. Create member management functions.  
  5. Create conversation and reaction functions.  
  6. Implement file upload functionality with Convex storage.

### 1.4. Authentication & Authorization
- **MUST**  
  1. Set up Convex Auth with multiple providers.  
  2. Implement proper authorization checks in all mutations.  
  3. Configure auth middleware and session management.

---

# Phase 2: Backend Connectivity & APIs

> **Goal**: Expose all necessary CRUD operations through Convex queries/mutations and validate authorization.

### 2.1. Integrate Convex Client
- **MUST**  
  1. Install Convex dependencies in Next.js project.  
  2. Install `convex` and `@convex-dev/auth`.  
  3. Initialize client with Convex deployment URL.  
  4. Set up ConvexProvider in Next.js app.

### 2.2. Auth Setup and User Management
- **MUST**  
  1. Configure Convex Auth providers in `convex/auth.config.ts`.  
  2. Implement user creation flow that automatically creates workspace + member.  
  3. Set up proper session management and auth state.

### 2.3. Validate Authorization
- **MUST**  
  1. Test workspace isolation across different users.  
  2. Verify that users can only access their workspace data.  
  3. Confirm proper member role enforcement.

### 2.4. Basic CRUD Helper Functions
- **MUST**  
  1. Implement and export Convex functions for:  
     - `createChannel({ workspaceId, name })`  
     - `getChannels(workspaceId)`  
     - `createMessage({ workspaceId, channelId, memberId, body, parentMessageId })`  
     - `getMessages({ channelId, parentMessageId, paginationOpts })`  
     - `generateUploadUrl()` for file uploads  
     - `createReaction({ workspaceId, messageId, memberId, value })`  
  2. Each function should include proper authorization checks.  
  3. Test functions with sample data to verify expected behavior.

### 2.5. Skip or Deflate Future AI Endpoints
- **WON'T** (for V1)  
  - Do not create any AI-related endpoints (e.g., `/api/orgbrain`). Document "Phase 2: AI integration" separately.

---

# Phase 3: Frontend Scaffold & Core UI

> **Goal**: Set up Next.js project, apply global design rules, and build static versions of Sidebar, Channel Pane, Message Pane, and Composer.

### 3.1. Initialize Next.js Project
- **MUST**  
  1. Initialize Next.js 14 with TypeScript and Tailwind CSS.  
     - **If uncertain** about setup options, discuss pros/cons.  
     - Get confirmation before proceeding.  
  2. Install dependencies:  
     ```
     npm install convex @convex-dev/auth
     npm install @tanstack/react-query
     npm install @radix-ui/react-* lucide-react
     npm install tailwindcss postcss autoprefixer
     ```
  3. Initialize Tailwind CSS:  
     ```
     npx tailwindcss init -p
     ```
     - Configure `tailwind.config.js` with color, font, spacing tokens from design guide.  
     - Add `@tailwind base; @tailwind components; @tailwind utilities;` to `src/index.css`.

### 3.2. Set Up Global Theme & CSS Variables
- **MUST**  
  1. In `src/index.css`, paste the CSS variables from design doc.  
  2. Ensure Tailwind config uses those variables or maps them as custom colors (e.g., `slack-purple: "var(--slack-purple)"`).

### 3.3. Implement Basic Layout Components
- **MUST**  
  1. **`<Sidebar />`**  
     - Static HTML: workspace name at top, placeholder channel items, "+ New Channel" button, user avatar at bottom.  
     - Use Tailwind classes per design (background `--sidebar-bg`, widths, padding).  
     - Leave click handlers empty for now.  
  2. **`<ChannelPane />`**  
     - Static list of placeholder channel names (e.g., "#general," "#random").  
     - Section title "Channels" (font 14 px, weight 500, color `--text-secondary`).  
     - List items styled per design.  
     - Leave "selected" state on first channel as default.  
  3. **`<MessagePane />`**  
     - Header: placeholder "#general," icons (search, settings) with `--text-secondary` color.  
     - Scrollable area: hard-coded a few sample messages (avatar, name, content, timestamp).  
     - Composer: textarea + send button + attach icon, styled exactly.  
  4. **`<ThreadContainer />`**  
     - Static example under a sample message: show how replies render (background, left border).  
     - Include small avatars and text per design.  
  5. **Compose above into a top-level `AppLayout`** that renders `<Sidebar />`, `<ChannelPane />`, `<MessagePane />` side by side (flex).  
  6. **Test in browser** at `http://localhost:3000` to ensure layout matches expected design (padding, colors, fonts).

### 3.4. Global State & Context
- **MUST**  
  1. Set up ConvexProvider and ConvexAuthProvider.  
  2. Create workspace and channel context for state management.  
  3. Implement useCurrentUser and useWorkspaceId hooks.  
  4. Set up proper auth state management.

---

# Phase 4: Frontend – Connect to Backend & CRUD

> **Goal**: Replace placeholders with dynamic data by calling Convex functions. Implement auth, channel list, message list, create channel, send message, threads, attachments, and reactions.

### 4.1. Authentication Flow (Sign Up / Sign In)

#### 4.1.1. Sign Up Page
- **MUST**  
  1. Create component `SignUp.jsx` with inputs: Full Name, Email, Password, Workspace Name, "Submit" button.  
  2. On "Submit":  
     - Use Convex Auth to sign up user.  
     - On success, create workspace and member records.  
     - Set up user session and workspace context.  
     - Redirect to "/channels" (Channel List route).

#### 4.1.2. Sign In Page
- **MUST**  
  1. Create component `SignIn.jsx` with inputs: Email, Password, "Sign In" button.  
  2. On "Sign In":  
     - Use Convex Auth to authenticate user.  
     - On success, fetch user's workspace and member data.  
     - Set up session and workspace context.  
     - Redirect to "/channels".

#### 4.1.3. Route Guards
- **MUST**  
  1. Implement protected routes that require authentication.  
  2. Redirect unauthenticated users to sign-in page.  
  3. Handle loading states during auth checks.

### 4.2. Dynamic Channel List & Selection

- **MUST**  
  1. In `<ChannelPane />`, replace static list with dynamic data:  
     ```js
     const channels = useQuery(api.channels.get, { workspaceId });
     ```
  2. Map over `channels` to render each channel item.  
  3. Show unread count badges using Convex queries.  
  4. On click of a channel item:  
     - Set `selectedChannelId` in context.  
     - Mark channel as read using Convex mutation.

- **SHOULD**  
  1. Highlight selected channel with appropriate styling.  
  2. Implement "hover" background effects.

- **COULD**  
  1. Add "Create Channel" button in `<ChannelPane />` that opens the modal.

### 4.3. Create Channel Modal

- **MUST**  
  1. Clicking "+ New Channel" opens `CreateChannelModal.jsx`.  
  2. Inside modal: inputs for `name`, "Create" and "Cancel" buttons.  
  3. On "Create" click:  
     - Validate `name` non-empty.  
     - Call Convex mutation to create channel.  
     - On success: close modal, refresh channel list.  
     - Automatically select the new channel.  
  4. On "Cancel": close modal.

- **SHOULD**  
  1. Disable "Create" button if `channelName.trim().length === 0`.  
  2. Show error toast if channel creation fails.

### 4.4. Dynamic Message List

- **MUST**  
  1. In `<MessagePane />`, replace static messages with dynamic data:  
     ```js
     const messages = usePaginatedQuery(api.messages.get, 
       { channelId: selectedChannelId }, { initialNumItems: 50 });
     ```
  2. Map over `messages.results` to render each message with avatar, name, content, timestamp.  
  3. Implement real-time updates using Convex live queries.

- **SHOULD**  
  1. If `messages.length === 0`, display "No messages in #channel-name. Start the conversation below."  
  2. Group consecutive messages by same user within 5 minutes.

- **COULD**  
  1. Implement "infinite scroll" with `messages.loadMore()`.

### 4.5. Message Composer & File Upload

- **MUST**  
  1. Create `Composer.jsx` under `<MessagePane />`.  
  2. Controlled textarea for `messageText`, and state for `attachedFile`.  
  3. On file select (`<input type="file" accept=".pdf,.txt" />`):  
     - Validate file type and size ≤ 10 MB.  
     - Store in state.  
  4. On "Send" click:  
     - If `attachedFile` exists:  
       1. Generate upload URL using Convex.  
       2. Upload file to Convex storage.  
       3. Create message with file reference.  
     - Else: Create text-only message.  
     - Clear `messageText` and `attachedFile` state.  
  5. Real-time message updates via Convex subscriptions.  
  6. Composer's "Send" button disabled if `messageText.trim() === ""` and no `attachedFile`.

- **SHOULD**  
  1. Show loading spinner during file upload and message creation.  
  2. Display file icon + filename once attached.  
  3. Show error toast on upload failure.

- **COULD**  
  1. Allow pressing "Cmd+Enter" or "Ctrl+Enter" to send.  
  2. Preview text-only attachments inline.

### 4.6. Display File Attachments

- **MUST**  
  1. In message rendering, check if message has file attachment.  
  2. If file exists, render download link under message text.  
  3. Style link with appropriate colors and hover effects.

### 4.7. Threaded Replies

- **MUST**  
  1. In `MessageItem.jsx`, add a "Reply" button that calls `onReplyClick(message.id)`.  
  2. In `MessagePane.jsx`, track state `expandedThreadId`.  
  3. When `onReplyClick(id)` invoked:  
     - Set `expandedThreadId = id`.  
     - Fetch thread replies using Convex query.  
     - Render `<ThreadContainer>` below the message.  
  4. Inside `ThreadContainer`, show each reply with smaller avatars.  
     - Include mini-composer for replies.  
     - On "Send Reply", create message with `parentMessageId`.

- **SHOULD**  
  1. Show "No replies yet" if thread is empty.  
  2. Add collapse functionality for threads.

---

# Phase 6: AI Summary Feature (TinyLlama + Convex)

> **Goal**: Implement AI-powered thread and channel summarization using local TinyLlama via Ollama.

### 6.1. Local AI Setup
- **MUST**  
  1. Install Ollama on development machine:  
     ```bash
     curl -fsSL https://ollama.ai/install.sh | sh
     ```
  2. Pull TinyLlama model (~637MB):  
     ```bash
     ollama pull tinyllama
     ```
  3. Start Ollama server:  
     ```bash
     ollama serve --host localhost --port 11434
     ```
  4. Test Ollama API with simple request to verify it's working.

### 6.2. Convex Schema Extensions
- **MUST**  
  1. Add `summaries` table to `convex/schema.ts`:  
     ```typescript
     summaries: defineTable({
       workspaceId: v.id("workspaces"),
       contextType: v.union(v.literal("thread"), v.literal("channel")),
       contextId: v.string(), // threadId or channelId
       summary: v.string(),
       messageCount: v.number(),
       participantCount: v.number(),
       generatedBy: v.id("members"),
       generatedAt: v.number(),
     })
       .index("by_workspace_id", ["workspaceId"])
       .index("by_context", ["workspaceId", "contextType", "contextId"]),
     ```
  2. Deploy schema changes: `npx convex dev`

### 6.3. Backend AI Integration
- **MUST**  
  1. Create `convex/aiSummary.ts` with core functions:  
     - `aggregateMessages()`: Fetch messages from thread/channel with workspace isolation  
     - `buildSummaryContext()`: Format messages with user names and timestamps  
     - `callTinyLlama()`: HTTP call to local Ollama server  
     - `parseSummaryResponse()`: Parse and structure AI response  
  2. Implement `generateThreadSummary` action:  
     ```typescript
     export const generateThreadSummary = action({
       args: {
         workspaceId: v.id("workspaces"),
         channelId: v.optional(v.id("channels")),
         threadId: v.optional(v.id("messages")),
         timeRange: v.optional(v.string()),
       },
       handler: async (ctx, args) => {
         // 1. Verify user permissions
         // 2. Aggregate messages with workspace isolation
         // 3. Build context with user names and timestamps
         // 4. Call local TinyLlama via HTTP
         // 5. Cache summary in database
         // 6. Return structured summary
       }
     });
     ```
  3. Add error handling for Ollama server unavailable scenarios.  
  4. Implement fallback summary generation when AI fails.

### 6.4. Frontend UI Components
- **MUST**  
  1. Create `<SummaryButton />` component:  
     - Icon: 📝 for threads, 📊 for channels  
     - Loading state with spinner  
     - Tooltip: "Generate AI Summary"  
  2. Create `<SummaryModal />` component:  
     - Display structured summary with sections:  
       - Participants  
       - Key Discussion Points  
       - Decisions Made  
       - Action Items  
       - Next Steps  
     - Copy to clipboard functionality  
     - Close button and overlay click handling  
  3. Add summary buttons to:  
     - Thread header (next to close button)  
     - Channel header (next to channel name)

### 6.5. Integration & Testing
- **MUST**  
  1. Create React hooks:  
     - `useGenerateThreadSummary()`: Call Convex action  
     - `useGenerateChannelSummary()`: Call Convex action  
  2. Integrate summary buttons with message components:  
     - `<Thread />`: Add summary button to header  
     - `<MessagePane />`: Add summary button to channel header  
  3. Handle loading states and error scenarios:  
     - Show spinner during generation  
     - Display error message if Ollama is down  
     - Show fallback summary if AI fails  
  4. Test with various scenarios:  
     - Short threads (< 10 messages)  
     - Long threads (50+ messages)  
     - Empty threads  
     - Ollama server down  
     - Network timeouts

### 6.6. Performance Optimization
- **SHOULD**  
  1. Implement summary caching:  
     - Check for existing summary before generating new one  
     - Cache summaries for 24 hours  
     - Invalidate cache when new messages added  
  2. Add message limits:  
     - Process maximum 500 messages per summary  
     - Truncate older messages if limit exceeded  
     - Show message count in summary metadata  
  3. Implement concurrent request limiting:  
     - Allow maximum 2-3 simultaneous summaries  
     - Queue additional requests  
     - Show "Please wait" message for queued requests

---

## Phase 7: Basic Profile & Sign-Out

> **Goal**: Let user view their name/avatar and sign out.

### 7.1. Profile Menu in Sidebar
- **MUST**  
  1. In `<Sidebar />`, render user avatar and name at the bottom.  
  2. Wrap in a clickable `<UserProfileMenu />` component.  
  3. On click, show a small dropdown:  
     - "Profile & Settings" (disabled or placeholder for V1).  
     - "Sign Out".  
  4. On "Sign Out" click:  
     ```js
     await convexAuth.signOut();
     ```
     - Clear auth state and redirect to sign-in page.

---

## Phase 8: Testing, QA & Final Touches

> **Goal**: Validate flows, fix edge cases, polish UI per design language.

### 8.1. Manual End-to-End Testing
- **MUST**  
  1. **Onboarding**: Sign Up → auto-create workspace → Channel List.  
  2. **Channel CRUD**:  
     - Create channel until limit → ensure proper validation.  
  3. **Messaging**:  
     - Post multiple messages (with and without attachment).  
     - Open thread → post reply → confirm it appears.  
  4. **Real-time**:  
     - Open app in two browser tabs → send message in one → confirm it appears in other.  
  5. **File Upload**:  
     - Upload PDF ≤ 10 MB → confirm message displays download link.  
     - Attempt > 10 MB or wrong file type → show inline error.

### 8.2. Accessibility & Contrast Checks
- **MUST**  
  1. Use WebAIM Contrast Checker for all color combinations.  
  2. Tab through UI: all interactive elements must receive focus and show visible outline.

### 8.3. Code Cleanup & Documentation
- **MUST**  
  1. Ensure code is linted (run ESLint/Prettier if configured).  
  2. Update README with setup instructions, feature list, and deployment notes.

---

## MoSCoW Summary

| Core Features                        | Priority    |
|--------------------------------------|-------------|
| Convex Backend + Auth                | **MUST**    |
| User Auth (Sign Up / Sign In)        | **MUST**    |
| Channel List & Create Channel        | **MUST**    |
| Message List & Send Message          | **MUST**    |
| Thread Replies                       | **MUST**    |
| File Attachments (PDF/TXT)           | **MUST**    |
| AI Thread/Channel Summary            | **MUST**    |
| Global CSS Variables & Tailwind      | **MUST**    |

| Enhanced Features                    | Priority    |
|--------------------------------------|-------------|
| Realtime Message Updates             | **SHOULD**  |
| Message Grouping (Same User)         | **SHOULD**  |
| Hover States & Visual Polish         | **SHOULD**  |
| Error Handling & Toast Messages      | **SHOULD**  |
| Loading States & Spinners            | **SHOULD**  |

| Nice-to-Have Features               | Priority    |
|--------------------------------------|-------------|
| Infinite Scroll in Message List      | **COULD**   |
| "Cmd+Enter" Send Shortcut            | **COULD**   |
| Reply Collapse Toggle Animation      | **SHOULD**  |
| Show File Icon Thumbnail Previews    | **SHOULD**  |

| Out-of-Scope for V1                  | Priority    |
|--------------------------------------|-------------|
| AI Features (Org Brain, Tone Meter)  | **WON'T**   |
| Private Channels / DMs               | **WON'T**   |
| Profile Settings Editing             | **WON'T**   |
| Dark Mode                            | **WON'T**   |

---

## Final Notes

1. **Choose the Right Model/Approach** for each decision point (e.g., auth providers, UI patterns).  
2. **Validate with the Project Owner** before proceeding whenever a "SHOULD" or ambiguous scenario arises.  
3. Proceed through Phase 1 → Phase 2 → ... → Phase 8, ticking off each atomic task.  

Once all "MUST" items are complete, you will have a fully functioning V1 Slack-clone.

